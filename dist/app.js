!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var I=F[U]={i:U,l:!1,exports:{}};return Q[U].call(I.exports,I,I.exports,B),I.l=!0,I.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{configurable:!1,enumerable:!0,get:U})},B.r=function(Q){Object.defineProperty(Q,"__esModule",{value:!0})},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="dist/",B(B.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/res.js\n\nfunction res() {\n    let resourceCache = {};\n    let loading = [];\n    let readyCallbacks = [];\n\n    // Load an image url or an array of image urls\n    function load(urlOrArr) {\n        if (urlOrArr instanceof Array) {\n            urlOrArr.forEach(function (url) {\n                _load(url);\n            });\n        } else {\n            _load(urlOrArr);\n        }\n    }\n\n    function _load(url) {\n        if (resourceCache[url]) {\n            return resourceCache[url];\n        } else {\n            let img = new Image();\n            img.onload = function () {\n                resourceCache[url] = img;\n\n                if (isReady()) {\n                    readyCallbacks.forEach(function (func) {\n                        func();\n                    });\n                }\n            };\n            resourceCache[url] = false;\n            img.src = url;\n        }\n    }\n\n    function get(url) {\n        return resourceCache[url];\n    }\n\n    function isReady() {\n        let ready = true;\n        for (let k in resourceCache) {\n            if (resourceCache.hasOwnProperty(k) && !resourceCache[k]) {\n                ready = false;\n            }\n        }\n        return ready;\n    }\n\n    function onReady(func) {\n        readyCallbacks.push(func);\n    }\n\n    window.resources = {\n        load: load,\n        get: get,\n        onReady: onReady,\n        isReady: isReady\n    };\n};\n\n/* harmony default export */ var src_res = (res);\n// CONCATENATED MODULE: ./src/sprite.js\nfunction spr() {\n    function Sprite(url, pos, size, speed, frames, dir, once) {\n        this.pos = pos;\n        this.size = size;\n        this.speed = typeof speed === 'number' ? speed : 0;\n        this.frames = frames;\n        this._index = 0;\n        this.url = url;\n        this.dir = dir || 'horizontal';\n        this.once = once;\n    };\n\n    Sprite.prototype = {\n        update: function (dt) {\n            this._index += this.speed * dt;\n        },\n\n        render: function (ctx) {\n            let frame;\n\n            if (this.speed > 0) {\n                let max = this.frames.length;\n                let idx = Math.floor(this._index);\n                frame = this.frames[idx % max];\n\n                if (this.once && idx >= max) {\n                    this.done = true;\n                    return;\n                }\n            } else {\n                frame = 0;\n            }\n\n            let x = this.pos[0];\n            let y = this.pos[1];\n\n            if (this.dir == 'vertical') {\n                y += frame * this.size[1];\n            } else {\n                x += frame * this.size[0];\n            }\n\n            ctx.drawImage(resources.get(this.url), x, y, this.size[0], this.size[1], 0, 0, this.size[0], this.size[1]);\n        }\n    };\n\n    window.Sprite = Sprite;\n};\n/* harmony default export */ var sprite = (spr);\n// CONCATENATED MODULE: ./src/in.js\nfunction inp() {\n    let pressedKeys = {};\n\n    function setKey(event, status) {\n        let code = event.keyCode;\n        let key;\n\n        switch (code) {\n            case 32:\n                key = 'SPACE';break;\n            case 37:\n                key = 'LEFT';break;\n            case 38:\n                key = 'UP';break;\n            case 39:\n                key = 'RIGHT';break;\n            case 40:\n                key = 'DOWN';break;\n            default:\n                // Convert ASCII codes to letters\n                key = String.fromCharCode(code);\n        }\n\n        pressedKeys[key] = status;\n    }\n\n    document.addEventListener('keydown', function (e) {\n        setKey(e, true);\n    });\n\n    document.addEventListener('keyup', function (e) {\n        setKey(e, false);\n    });\n\n    window.addEventListener('blur', function () {\n        pressedKeys = {};\n    });\n\n    window.input = {\n        isDown: function (key) {\n            return pressedKeys[key.toUpperCase()];\n        }\n    };\n};\n/* harmony default export */ var src_in = (inp);\n// CONCATENATED MODULE: ./src/index.js\n\n\n\nsrc_res();\nsprite();\nsrc_in();\n\nlet requestAnimFrame = function () {\n    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n        window.setTimeout(callback, 1000 / 60);\n    };\n}();\n\n// Create the canvas\nlet canvas = document.createElement(\"canvas\");\nlet ctx = canvas.getContext(\"2d\");\ncanvas.width = 1300;\ncanvas.height = 700;\ndocument.body.appendChild(canvas);\n\n// The main game loop\nlet lastTime;\nfunction main() {\n    let now = Date.now();\n    let dt = (now - lastTime) / 1000.0;\n    update(dt);\n    render();\n    lastTime = now;\n    requestAnimFrame(main);\n};\nlet windowName;\nlet nameArea;\nlet enteredNameYet = false;\nlet startMenu = document.createElement('div');\nstartMenu.style.width = 1900 + 'px';\nstartMenu.style.height = 930 + 'px';\nstartMenu.align = 'center';\nstartMenu.style.background = \"url(img/fon_lenty_radiaciya_opasnost_stena_18526_1280x1280[1].jpg)\";\nstartMenu.style.backgroundSize = \"100%\";\n\nlet playButton = document.createElement('button');\nplayButton.innerText = \"Play\";\nplayButton.style.backgroundColor = \"yellow\";\nplayButton.style.width = 200 + 'px';\nplayButton.style.height = 90 + 'px';\nstartMenu.appendChild(playButton);\nlet scoreButton = document.createElement('button');\nscoreButton.innerText = \"Score\";\nscoreButton.style.backgroundColor = \"yellow\";\nscoreButton.style.width = 200 + 'px';\nscoreButton.style.height = 90 + 'px';\nstartMenu.appendChild(scoreButton);\ndocument.body.appendChild(startMenu);\nfunction init() {\n    startMenu.style.display = 'block';\n    document.getElementById('instructions').style.display = 'none';\n    scoreEl.style.display = 'none';\n    playButton.addEventListener('click', function () {\n        startMenu.style.display = 'none';\n        canvas.style.display = 'block';\n        enterName();\n    });\n}\n\nresources.load(['img/sprites.png', 'img/terrain.png']);\nresources.onReady(init);\n// Game state\nlet player = {\n    pos: [0, 0],\n    sprite: new Sprite('img/sprites.png', [0, 0], [39, 39], 16, [0, 1])\n};\n\nlet bullets = [];\nlet enemies = [];\nlet explosions = [];\n\nlet lastFire = Date.now();\nlet gameTime = 0;\nlet isGameOver;\nlet terrainPattern;\n\nlet score = 0;\nlet scoreEl = document.getElementById('score');\n\n// Speed in pixels per second\nlet playerSpeed = 200;\nlet bulletSpeed = 500;\nlet enemySpeed = 100;\n\n// Update game objects\nfunction update(dt) {\n    gameTime += dt;\n\n    handleInput(dt);\n    updateEntities(dt);\n\n    // It gets harder over time by adding enemies using this\n    // equation: 1-.993^gameTime\n    if (Math.random() < 1 - Math.pow(.993, gameTime)) {\n        enemies.push({\n            pos: [canvas.width, Math.random() * (canvas.height - 39)],\n            sprite: new Sprite('img/sprites.png', [0, 78], [80, 39], 6, [0, 1, 2, 3, 2, 1])\n        });\n    }\n\n    checkCollisions();\n\n    scoreEl.innerHTML = score;\n};\n\nfunction handleInput(dt) {\n    if (input.isDown('DOWN') || input.isDown('s')) {\n        player.pos[1] += playerSpeed * dt;\n    }\n\n    if (input.isDown('UP') || input.isDown('w')) {\n        player.pos[1] -= playerSpeed * dt;\n    }\n\n    if (input.isDown('LEFT') || input.isDown('a')) {\n        player.pos[0] -= playerSpeed * dt;\n    }\n\n    if (input.isDown('RIGHT') || input.isDown('d')) {\n        player.pos[0] += playerSpeed * dt;\n    }\n\n    if (input.isDown('SPACE') && !isGameOver && Date.now() - lastFire > 100) {\n        let x = player.pos[0] + player.sprite.size[0] / 2;\n        let y = player.pos[1] + player.sprite.size[1] / 2;\n\n        bullets.push({ pos: [x, y],\n            dir: 'forward',\n            sprite: new Sprite('img/sprites.png', [0, 39], [18, 8]) });\n        bullets.push({ pos: [x, y],\n            dir: 'up',\n            sprite: new Sprite('img/sprites.png', [0, 50], [9, 5]) });\n        bullets.push({ pos: [x, y],\n            dir: 'down',\n            sprite: new Sprite('img/sprites.png', [0, 60], [9, 5]) });\n\n        lastFire = Date.now();\n    }\n}\n\nfunction updateEntities(dt) {\n    // Update the player sprite animation\n    player.sprite.update(dt);\n\n    // Update all the bullets\n    for (let i = 0; i < bullets.length; i++) {\n        let bullet = bullets[i];\n\n        switch (bullet.dir) {\n            case 'up':\n                bullet.pos[1] -= bulletSpeed * dt;break;\n            case 'down':\n                bullet.pos[1] += bulletSpeed * dt;break;\n            default:\n                bullet.pos[0] += bulletSpeed * dt;\n        }\n\n        // Remove the bullet if it goes offscreen\n        if (bullet.pos[1] < 0 || bullet.pos[1] > canvas.height || bullet.pos[0] > canvas.width) {\n            bullets.splice(i, 1);\n            i--;\n        }\n    }\n\n    // Update all the enemies\n    for (let i = 0; i < enemies.length; i++) {\n        enemies[i].pos[0] -= enemySpeed * dt;\n        enemies[i].sprite.update(dt);\n\n        // Remove if offscreen\n        if (enemies[i].pos[0] + enemies[i].sprite.size[0] < 0) {\n            enemies.splice(i, 1);\n            i--;\n        }\n    }\n\n    // Update all the explosions\n    for (let i = 0; i < explosions.length; i++) {\n        explosions[i].sprite.update(dt);\n\n        // Remove if animation is done\n        if (explosions[i].sprite.done) {\n            explosions.splice(i, 1);\n            i--;\n        }\n    }\n}\n\n// Collisions\n\nfunction collides(x, y, r, b, x2, y2, r2, b2) {\n    return !(r <= x2 || x > r2 || b <= y2 || y > b2);\n}\n\nfunction boxCollides(pos, size, pos2, size2) {\n    return collides(pos[0], pos[1], pos[0] + size[0], pos[1] + size[1], pos2[0], pos2[1], pos2[0] + size2[0], pos2[1] + size2[1]);\n}\nlet globalscore = 0;\nfunction checkCollisions() {\n    checkPlayerBounds();\n\n    // Run collision detection for all enemies and bullets\n    for (let i = 0; i < enemies.length; i++) {\n        let pos = enemies[i].pos;\n        let size = enemies[i].sprite.size;\n\n        for (let j = 0; j < bullets.length; j++) {\n            let pos2 = bullets[j].pos;\n            let size2 = bullets[j].sprite.size;\n\n            if (boxCollides(pos, size, pos2, size2)) {\n                // Remove the enemy\n                enemies.splice(i, 1);\n                i--;\n\n                // Add score\n                score += 100;\n                globalscore = score;\n\n                // Add an explosion\n                explosions.push({\n                    pos: pos,\n                    sprite: new Sprite('img/sprites.png', [0, 117], [39, 39], 16, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], null, true)\n                });\n\n                // Remove the bullet and stop this iteration\n                bullets.splice(j, 1);\n                break;\n            }\n        }\n\n        if (boxCollides(pos, size, player.pos, player.sprite.size)) {\n            gameOver();\n        }\n    }\n}\n\nfunction checkPlayerBounds() {\n    // Check bounds\n    if (player.pos[0] < 0) {\n        player.pos[0] = 0;\n    } else if (player.pos[0] > canvas.width - player.sprite.size[0]) {\n        player.pos[0] = canvas.width - player.sprite.size[0];\n    }\n\n    if (player.pos[1] < 0) {\n        player.pos[1] = 0;\n    } else if (player.pos[1] > canvas.height - player.sprite.size[1]) {\n        player.pos[1] = canvas.height - player.sprite.size[1];\n    }\n}\n\n// Draw everything\nfunction render() {\n    ctx.fillStyle = terrainPattern;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Render the player if the game isn't over\n    if (!isGameOver) {\n        renderEntity(player);\n    }\n\n    renderEntities(bullets);\n    renderEntities(enemies);\n    renderEntities(explosions);\n};\n\nfunction renderEntities(list) {\n    for (let i = 0; i < list.length; i++) {\n        renderEntity(list[i]);\n    }\n}\n\nfunction renderEntity(entity) {\n    ctx.save();\n    ctx.translate(entity.pos[0], entity.pos[1]);\n    entity.sprite.render(ctx);\n    ctx.restore();\n}\n\n// Game over\nfunction gameOver() {\n    document.getElementById('game-over').style.display = 'block';\n    document.getElementById('score-in-game-over').innerHTML = `Score: ${globalscore}`;\n    document.getElementById('game-over-overlay').style.display = 'block';\n    isGameOver = true;\n}\n\nfunction toRun() {\n    document.getElementById('instructions').style.display = 'block';\n    scoreEl.style.display = 'block';\n    terrainPattern = ctx.createPattern(resources.get('img/terrain.png'), 'repeat');\n    document.getElementById('play-again').addEventListener('click', function () {\n        src_reset();\n    });\n\n    document.getElementById('menu').addEventListener('click', function () {\n        canvas.style.display = 'none';\n        src_reset();\n        resources.load(['img/sprites.png', 'img/terrain.png']);\n        resources.onReady(init);\n    });\n    src_reset();\n    lastTime = Date.now();\n    main();\n}\n\nfunction enterName() {\n    if (!enteredNameYet) {\n        windowName = document.createElement('div');\n        windowName.style.display = 'none';\n        windowName.style.zIndex = '1';\n        windowName.style.bottom = '0';\n        windowName.style.right = '0';\n        windowName.style.left = '0';\n        windowName.style.top = '0';\n        windowName.style.position = 'absolute';\n        windowName.style.height = '200px';\n        windowName.style.width = '512px';\n        windowName.style.margin = 'auto';\n        windowName.style.backgroundColor = 'black';\n        windowName.style.opacity = '.5';\n        windowName.style.color = 'white';\n        windowName.style.textAlign = 'center';\n        windowName.style.display = 'block';\n        let enterH2 = document.createElement('h2');\n        enterH2.style.fontSize = '3em';\n        enterH2.style.fontFamily = 'sans-serif';\n        enterH2.innerText = \"Enter your name: \";\n        nameArea = document.createElement('textarea');\n        nameArea.setAttribute(\"required\", true);\n        let enterButton = document.createElement('button');\n        enterButton.innerText = \"Enter\";\n        enterButton.style.fontSize = '1.5em';\n        windowName.appendChild(enterH2);\n        windowName.appendChild(nameArea);\n        windowName.appendChild(enterButton);\n        document.body.appendChild(windowName);\n        enterButton.addEventListener('click', function () {\n            enteredNameYet = true;\n            windowName.style.display = 'none';\n            toRun();\n        });\n    } else {\n        toRun();\n    }\n}\n\n// Reset game to original state\nfunction src_reset() {\n    document.getElementById('game-over').style.display = 'none';\n    document.getElementById('game-over-overlay').style.display = 'none';\n    isGameOver = false;\n    gameTime = 0;\n    score = 0;\n    globalscore = 0;\n    enemies = [];\n    bullets = [];\n\n    player.pos = [50, canvas.height / 2];\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);